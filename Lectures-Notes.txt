Notes:

JSX is a tool that allows writing html and javascript 
example const element = <p> ok! </p>  babel does all the work for us

it is possible to write react without JSX, but will look verbosed and hard to understand

Always remember to close your tag

You cannot return multiple elements, you should wrap everything in a div 

BABEL is a JavaScript Compiler
Babel is a JavaScript compiler that converts modern JavaScript code into a version compatible with all browsers


PROPS:
props are for configuring your component
props are immutable
props can be strings
for ther types, embed JS expression using the curly braces: salary={100} hobbies:{["dancing", "reading"]}

components can specify default values for missing props


to create react app
npm install -g create-react-app
create-react-app my-app

npm start //to start your app

set NODE_OPTIONS=--openssl-legacy-provider

CONVENTIONS
each component goes in a separe file and capitalized
example: src/Person.js, src/Pet.js

components extends componento imported from react

the top object is App, you can change it, but it is assumed by skeleton

make a cdd file for each react component
import it st the top of the componenet
conventiona to addd className="NameComponent"

States
The state of the client interface is not aleays tied directly to whts going on in the server side
state is designed to constantly change in response to events
a state it is always an object(POJO), since youll want to keep track of sveral keys/values
it needs to hava an initial state as soon as the component is created
you dont need to initialize props for example
you always use this.setState({score:0}); but to not call it on the constructor. The setState change is asyncrounous and the application will be re-rendered

React Events
examples: OnClick, OnMouseOver, OnSubmit, OnKeyDown, onKeyUp, OnKeyPress

The keyword this
you will lose this context when yu pass a function as a handler
example using this in a function will not work as expected

to fix this 
use bind
use arrow function
bind in constructor
You can also bind with argumets -> how ? -> {this.anyFunction.bind(this, arg)} or {() => this.anyFunction(c)}

everytime you call bind it is a brand new function

passing functions to child components
children are often not stateful, but need to tell parents to change state

data flow:
parent passes a function down to the children, the parent re render to change state when needed
pass the function to the children as a prop and always bind at higher level
parent function action/ child function handleAction

Forms:
Html form elements work diferently than other dom elements in react 
states = has acces to the data the user entered

Lifecicyle
mounting
updating
unmounting


initializa state = constructor();
it tells react what should be displayed = render()

componentDidMount() - after the first time the component render, you can also make ajax call
componentDidUpdate() - after every render occurs implement any side effect operation auto saving, uncontrolled component 
componentWillUnmount() - right before the component is destroyed, a place to do some clean up 

server side routing 
the server side figures the route -> server decides what html to return base on URL requested, entire page refreshes 

client side routing
route it through on click which will go to the componente based on click #section1 #section2 etccc...
we can update through state if we want, but we will not get history of where weve been - url stays the same 

lib - react-router-dom

Hooks 
they let you use state and other react features without writing a class